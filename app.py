import logging
from flask import Flask, render_template, request, redirect, url_for, flash, Response, jsonify
import psycopg2
import psycopg2.extras
import re
import os
import csv

# Napl√≥z√°s be√°ll√≠t√°sa
logging.basicConfig(level=logging.DEBUG, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

app = Flask(__name__)
app.secret_key = "titkoskulcs"

# ‚úÖ Adatb√°zis kapcsolat URL a k√∂rnyezetv√°ltoz√≥b√≥l
DATABASE_URL = os.environ.get("DATABASE_URL")

if not DATABASE_URL:
    logger.error("DATABASE_URL k√∂rnyezetv√°ltoz√≥ nincs be√°ll√≠tva!")
    raise ValueError("DATABASE_URL k√∂rnyezetv√°ltoz√≥ nincs be√°ll√≠tva!")

# ‚úÖ Adatb√°zis kapcsolat
def get_db_connection():
    """ Adatb√°zis kapcsolat l√©trehoz√°sa PostgreSQL-hez """
    logger.debug("Kapcsolat nyit√°sa a PostgreSQL-hez...")
    try:
        conn = psycopg2.connect(DATABASE_URL)
        conn.cursor_factory = psycopg2.extras.DictCursor
        logger.debug("Kapcsolat sikeresen megnyitva.")
        return conn
    except Exception as e:
        logger.error(f"Hiba a kapcsolat megnyit√°sakor: {str(e)}")
        raise

# ‚úÖ Koordin√°ta form√°tum ellen≈ërz√©s
def is_valid_coordinate(value):
    """ Ellen≈ërzi, hogy egy sz√°m megfelel≈ë koordin√°ta form√°tum-e """
    return bool(re.match(r"^-?\d{1,2}(\.\d{1,7})?$", value))

# ‚úÖ F≈ëoldal
@app.route("/")
def index():
    logger.debug("F≈ëoldal lek√©rdez√©se: SELECT * FROM places")
    try:
        with get_db_connection() as conn:
            with conn.cursor() as cursor:
                cursor.execute("SELECT * FROM places ORDER BY name")
                places = cursor.fetchall()
        logger.debug(f"{len(places)} helysz√≠nt tal√°ltam.")
        return render_template("index.html", places=places)
    except Exception as e:
        logger.error(f"Hiba a f≈ëoldal lek√©rdez√©se sor√°n: {str(e)}")
        flash(f"‚ö†Ô∏è Hiba t√∂rt√©nt: {str(e)}", "danger")
        return render_template("index.html", places=[])

# ‚úÖ √öj hely hozz√°ad√°sa
@app.route("/add", methods=["GET", "POST"])
def add_place():
    if request.method == "POST":
        name = request.form["name"].strip()
        east = request.form["east"].strip()
        north = request.form["north"].strip()
        address = request.form.get("address", "").strip()
        notes = request.form.get("notes", "").strip()

        logger.debug(f"√öj hely hozz√°ad√°sa: name={name}, east={east}, north={north}, address={address}, notes={notes}")

        if not (is_valid_coordinate(east) and is_valid_coordinate(north)):
            flash("‚ö†Ô∏è √ârv√©nytelen koordin√°ta form√°tum!", "danger")
            logger.warning("√ârv√©nytelen koordin√°ta form√°tum.")
            return redirect(url_for("add_place"))

        try:
            with get_db_connection() as conn:
                with conn.cursor() as cursor:
                    cursor.execute(
                        "INSERT INTO places (name, east, north, address, notes) VALUES (%s, %s, %s, %s, %s)",
                        (name, east, north, address, notes)
                    )
                    conn.commit()
            logger.debug("Hely sikeresen hozz√°adva az adatb√°zisba.")
            flash("‚úÖ Hely sikeresen hozz√°adva!", "success")
        except psycopg2.errors.UniqueViolation as e:
            logger.warning(f"Duplik√°lt helysz√≠ne: {str(e)}")
            flash("‚ö†Ô∏è Ez a hely m√°r l√©tezik!", "warning")
        except Exception as e:
            logger.error(f"Hiba t√∂rt√©nt az adatb√°zis m≈±velet sor√°n: {str(e)}")
            flash(f"‚ö†Ô∏è Hiba t√∂rt√©nt: {str(e)}", "danger")

        return redirect(url_for("index"))

    return render_template("add.html")

# ‚úÖ CSV import√°l√°s
@app.route("/import", methods=["GET", "POST"])
def import_csv():
    if request.method == "POST":
        file = request.files["file"]
        if not file:
            flash("‚ùå Nincs f√°jl kiv√°lasztva!", "danger")
            logger.warning("Nincs f√°jl kiv√°lasztva a CSV import√°l√°shoz.")
            return redirect(url_for("import_csv"))

        UPLOAD_FOLDER = "uploads"
        os.makedirs(UPLOAD_FOLDER, exist_ok=True)

        file_path = os.path.join(UPLOAD_FOLDER, file.filename)
        file.save(file_path)

        imported_count = 0
        duplicate_entries = []

        try:
            with get_db_connection() as conn:
                with conn.cursor() as cursor:
                    with open(file_path, newline="", encoding="utf-8-sig") as csvfile:
                        reader = csv.DictReader(csvfile)
                        for row in reader:
                            name = row.get("N√©v", "").strip()
                            east = row.get("Kelet", "").strip()
                            north = row.get("√âszak", "").strip()
                            address = row.get("C√≠m", "").strip()
                            notes = row.get("Megjegyz√©sek", "").strip()

                            logger.debug(f"CSV sor feldolgoz√°sa: name={name}, east={east}, north={north}")

                            if not (is_valid_coordinate(east) and is_valid_coordinate(north)):
                                logger.warning(f"√ârv√©nytelen koordin√°t√°k a sorban: east={east}, north={north}")
                                continue

                            try:
                                cursor.execute(
                                    "INSERT INTO places (name, east, north, address, notes) VALUES (%s, %s, %s, %s, %s)",
                                    (name, east, north, address, notes)
                                )
                                imported_count += 1
                            except psycopg2.errors.UniqueViolation:
                                duplicate_entries.append(name)
                                logger.warning(f"Duplik√°lt helysz√≠ne a CSV-ben: {name}")
            conn.commit()
            logger.debug(f"CSV import√°l√°s befejezve: {imported_count} hely import√°lva, {len(duplicate_entries)} duplik√°lt.")
        except Exception as e:
            logger.error(f"Hiba t√∂rt√©nt a CSV import√°l√°s sor√°n: {str(e)}")
            flash(f"‚ö†Ô∏è Hiba t√∂rt√©nt az import√°l√°s sor√°n: {str(e)}", "danger")
        finally:
            os.remove(file_path)

        if imported_count > 0:
            flash(f"‚úÖ {imported_count} √∫j hely import√°lva!", "success")
        if duplicate_entries:
            flash(f"‚ö†Ô∏è {len(duplicate_entries)} bejegyz√©s m√°r l√©tezett!", "warning")

        return redirect(url_for("index"))

    return render_template("import.html")

# ‚úÖ Hely t√∂rl√©se
@app.route("/delete/<int:id>", methods=["POST"])
def delete(id):
    logger.debug(f"Hely t√∂rl√©se: id={id}")
    try:
        with get_db_connection() as conn:
            with conn.cursor() as cursor:
                cursor.execute("DELETE FROM places WHERE id = %s", (id,))
                conn.commit()
        logger.debug(f"Hely t√∂r√∂lve: id={id}")
        flash("üóëÔ∏è Hely sikeresen t√∂r√∂lve!", "success")
    except Exception as e:
        logger.error(f"Hiba t√∂rt√©nt a hely t√∂rl√©se sor√°n: {str(e)}")
        flash(f"‚ö†Ô∏è Hiba t√∂rt√©nt: {str(e)}", "danger")

    return redirect(url_for("index"))

# ‚úÖ Hely szerkeszt√©se
@app.route("/edit/<int:id>", methods=["GET", "POST"])
def edit(id):
    logger.debug(f"Hely szerkeszt√©se lek√©rdez√©se: id={id}")
    try:
        with get_db_connection() as conn:
            with conn.cursor() as cursor:
                cursor.execute("SELECT * FROM places WHERE id = %s", (id,))
                place = cursor.fetchone()

        if not place:
            flash("‚ùå A hely nem tal√°lhat√≥!", "danger")
            logger.warning(f"Hely nem tal√°lhat√≥: id={id}")
            return redirect(url_for("index"))

        if request.method == "POST":
            name = request.form["name"].strip()
            east = request.form["east"].strip()
            north = request.form["north"].strip()
            address = request.form.get("address", "").strip()
            notes = request.form.get("notes", "").strip()

            logger.debug(f"Hely szerkeszt√©se: id={id}, name={name}, east={east}, north={north}")

            if not (is_valid_coordinate(east) and is_valid_coordinate(north)):
                flash("‚ö†Ô∏è √ârv√©nytelen koordin√°ta form√°tum!", "danger")
                logger.warning("√ârv√©nytelen koordin√°ta form√°tum.")
                return redirect(url_for("edit", id=id))

            with get_db_connection() as conn:
                with conn.cursor() as cursor:
                    cursor.execute(
                        "UPDATE places SET name = %s, east = %s, north = %s, address = %s, notes = %s WHERE id = %s",
                        (name, east, north, address, notes, id)
                    )
                    conn.commit()
            logger.debug(f"Hely sikeresen m√≥dos√≠tva: id={id}")
            flash("‚úÖ A hely sikeresen m√≥dos√≠tva!", "success")
            return redirect(url_for("index"))

        return render_template("edit.html", place=place)
    except Exception as e:
        logger.error(f"Hiba t√∂rt√©nt a hely szerkeszt√©se sor√°n: {str(e)}")
        flash(f"‚ö†Ô∏è Hiba t√∂rt√©nt: {str(e)}", "danger")
        return redirect(url_for("index"))

# ‚úÖ CSV export√°l√°s
@app.route("/export")
def export_csv():
    logger.debug("CSV export√°l√°s ind√≠t√°sa...")
    try:
        with get_db_connection() as conn:
            with conn.cursor() as cursor:
                cursor.execute("SELECT name, east, north, address, notes FROM places")
                places = cursor.fetchall()

        csv_data = "N√©v,Kelet,√âszak,C√≠m,Megjegyz√©sek\n"
        for place in places:
            csv_data += f"{place['name']},{place['east']},{place['north']},{place['address']},{place['notes']}\n"

        logger.debug(f"CSV export√°lva: {len(places)} helysz√≠nt tartalmaz.")
        response = Response(csv_data.encode("utf-8-sig"), mimetype="text/csv")
        response.headers["Content-Disposition"] = "attachment; filename=helyek_export.csv"
        return response
    except Exception as e:
        logger.error(f"Hiba t√∂rt√©nt a CSV export√°l√°s sor√°n: {str(e)}")
        flash(f"‚ö†Ô∏è Hiba t√∂rt√©nt: {str(e)}", "danger")
        return redirect(url_for("index"))

# üÜï API v√©gpont az √∂sszes hely JSON-k√©nt val√≥ lek√©rdez√©s√©re
@app.route("/api/places", methods=["GET"])
def api_places():
    """API v√©gpont az √∂sszes hely list√°z√°s√°ra JSON form√°tumban."""
    logger.debug("API: √ñsszes hely lek√©rdez√©se...")
    try:
        with get_db_connection() as conn:
            with conn.cursor() as cursor:
                cursor.execute("SELECT * FROM places ORDER BY name")
                places = cursor.fetchall()

        places_list = []
        for place in places:
            places_list.append({
                "id": place["id"],
                "name": place["name"],
                "east": place["east"],
                "north": place["north"],
                "address": place["address"],
                "notes": place["notes"]
            })
        logger.debug(f"API: {len(places_list)} helysz√≠nt k√ºldtem vissza.")
        return jsonify(places_list)
    except Exception as e:
        logger.error(f"Hiba t√∂rt√©nt az API lek√©rdez√©s sor√°n: {str(e)}")
        return jsonify({"error": str(e)}), 500

if __name__ == "__main__":
    logger.info("Alkalmaz√°s ind√≠t√°sa...")
    print("\nüìå Regisztr√°lt Flask v√©gpontok:")
    print(app.url_map)
    from waitress import serve
    port = int(os.environ.get("PORT", 5000))
    serve(app, host="0.0.0.0", port=port)
