import webbrowser
from flask import Flask, render_template, request, redirect, url_for, flash, Response
import sqlite3
import re
import os
import csv
import threading
import time

app = Flask(__name__)
app.secret_key = "titkoskulcs"

import os
import sys

def get_database_path():
    """ Meghat√°rozza az adatb√°zis hely√©t az EXE futtat√°sa eset√©n """
    if getattr(sys, 'frozen', False):  # Ha EXE-k√©nt futtatjuk
        base_path = sys._MEIPASS  # PyInstaller √°ltal gener√°lt ideiglenes mappa
    else:
        base_path = os.path.dirname(os.path.abspath(__file__))  # Norm√°l futtat√°s eset√©n

    return os.path.join(base_path, "database.db")

DATABASE = get_database_path()


def get_db_connection():
    """ Adatb√°zis kapcsolat l√©trehoz√°sa """
    conn = sqlite3.connect(DATABASE, timeout=10, check_same_thread=False)
    conn.row_factory = sqlite3.Row
    return conn

def is_valid_coordinate(value):
    """ Koordin√°ta form√°tum ellen≈ërz√©se """
    return bool(re.match(r"^\d{1,2}(\.\d{1,7})?$", value))

@app.route("/")
def index():
    """ F≈ëoldal - list√°zza az adatokat """
    conn = get_db_connection()
    places = conn.execute("SELECT * FROM places ORDER BY name").fetchall()
    conn.close()
    return render_template("index.html", places=places)

@app.route("/add", methods=["GET", "POST"])
def add_place():
    """ √öj hely hozz√°ad√°sa """
    if request.method == "POST":
        name = request.form["name"].strip()
        east = "{:.7f}".format(float(request.form["east"].strip()))
        north = "{:.7f}".format(float(request.form["north"].strip()))
        address = request.form.get("address", "").strip()
        notes = request.form.get("notes", "").strip()

        conn = get_db_connection()
        cursor = conn.cursor()

        # üö® Egyedi √©rt√©kek ellen≈ërz√©se minden oszlopra k√ºl√∂n
        error_messages = []

        cursor.execute("SELECT id FROM places WHERE name = ?", (name,))
        if cursor.fetchone():
            error_messages.append("‚ö†Ô∏è A n√©v m√°r l√©tezik az adatb√°zisban!")

        cursor.execute("SELECT id FROM places WHERE east = ?", (east,))
        if cursor.fetchone():
            error_messages.append("‚ö†Ô∏è A keleti koordin√°ta m√°r l√©tezik az adatb√°zisban!")

        cursor.execute("SELECT id FROM places WHERE north = ?", (north,))
        if cursor.fetchone():
            error_messages.append("‚ö†Ô∏è Az √©szaki koordin√°ta m√°r l√©tezik az adatb√°zisban!")

        # Ha van duplik√°lt adat, akkor visszaadunk egy figyelmeztet√©st √©s nem mentj√ºk el
        if error_messages:
            for error in error_messages:
                flash(error, "warning")
            conn.close()
            return redirect(url_for("add_place"))

        try:
            cursor.execute("INSERT INTO places (name, east, north, address, notes) VALUES (?, ?, ?, ?, ?)", 
                           (name, east, north, address, notes))
            conn.commit()
            flash("‚úÖ Hely sikeresen hozz√°adva!", "success")
        except sqlite3.IntegrityError:
            flash("‚ö†Ô∏è Az adatok nem ker√ºltek ment√©sre, mert m√°r l√©teznek!", "warning")
        finally:
            conn.close()

        return redirect(url_for("index"))

    return render_template("add.html")


@app.route("/import", methods=["GET", "POST"])
def import_csv():
    """ CSV import√°l√°s """
    if request.method == "POST":
        file = request.files["file"]
        if not file:
            flash("‚ùå Nincs f√°jl kiv√°lasztva!", "danger")
            return redirect(url_for("import_csv"))

        UPLOAD_FOLDER = "uploads"
        os.makedirs(UPLOAD_FOLDER, exist_ok=True)

        file_path = os.path.join(UPLOAD_FOLDER, file.filename)
        file.save(file_path)

        conn = get_db_connection()
        cursor = conn.cursor()

        imported_count = 0
        duplicate_entries = []

        with open(file_path, newline="", encoding="utf-8-sig") as csvfile:
            reader = csv.DictReader(csvfile)
            if reader.fieldnames:
                reader.fieldnames = [field.strip() for field in reader.fieldnames]

            for row in reader:
                name = row.get("N√©v", "").strip()
                east = row.get("Kelet", "").strip()
                north = row.get("√âszak", "").strip()
                address = row.get("C√≠m", "").strip()
                notes = row.get("Megjegyz√©sek", "").strip()

                # **Hib√°s koordin√°t√°k ellen≈ërz√©se**
                if not east.replace('.', '', 1).isdigit() or not north.replace('.', '', 1).isdigit():
                    continue

                # **Duplik√°ci√≥ ellen≈ërz√©se (N√©v is sz√°m√≠t!)**
                cursor.execute("SELECT id FROM places WHERE name = ?", (name,))
                if cursor.fetchone():
                    duplicate_entries.append(name)
                    continue

                try:
                    cursor.execute("INSERT INTO places (name, east, north, address, notes) VALUES (?, ?, ?, ?, ?)", 
                                   (name, east, north, address, notes))
                    imported_count += 1
                except sqlite3.IntegrityError:
                    duplicate_entries.append(name)
                    continue

        conn.commit()
        conn.close()
        os.remove(file_path)

        if imported_count > 0:
            flash(f"‚úÖ {imported_count} √∫j hely import√°lva!", "success")

        if duplicate_entries:
            flash(f"‚ö†Ô∏è {len(duplicate_entries)} bejegyz√©s m√°r l√©tezett!", "warning")

        return redirect(url_for("index"))

    return render_template("import.html")

@app.route("/delete/<int:id>", methods=["POST"])
def delete(id):
    """ Hely t√∂rl√©se """
    conn = get_db_connection()
    cursor = conn.cursor()
    cursor.execute("DELETE FROM places WHERE id = ?", (id,))
    conn.commit()
    conn.close()
    flash("üóëÔ∏è Hely sikeresen t√∂r√∂lve!", "success")
    return redirect(url_for("index"))

@app.route("/edit/<int:id>", methods=["GET", "POST"])
def edit(id):
    """ Hely szerkeszt√©se """
    conn = get_db_connection()
    cursor = conn.cursor()
    
    # üìå Lek√©rdezz√ºk a szerkesztett helyet
    cursor.execute("SELECT * FROM places WHERE id = ?", (id,))
    place = cursor.fetchone()

    if not place:
        flash("‚ùå A hely nem tal√°lhat√≥!", "danger")
        conn.close()
        return redirect(url_for("index"))

    if request.method == "POST":
        name = request.form["name"].strip()
        east = "{:.7f}".format(float(request.form["east"].strip()))
        north = "{:.7f}".format(float(request.form["north"].strip()))
        address = request.form.get("address", "").strip()
        notes = request.form.get("notes", "").strip()

        error_messages = []

        # üö® Egyedi √©rt√©kek ellen≈ërz√©se (kiv√©ve a saj√°t id-t)
        cursor.execute("SELECT id FROM places WHERE name = ? AND id != ?", (name, id))
        if cursor.fetchone():
            error_messages.append("‚ö†Ô∏è A n√©v m√°r l√©tezik az adatb√°zisban!")

        cursor.execute("SELECT id FROM places WHERE east = ? AND id != ?", (east, id))
        if cursor.fetchone():
            error_messages.append("‚ö†Ô∏è A keleti koordin√°ta m√°r l√©tezik az adatb√°zisban!")

        cursor.execute("SELECT id FROM places WHERE north = ? AND id != ?", (north, id))
        if cursor.fetchone():
            error_messages.append("‚ö†Ô∏è Az √©szaki koordin√°ta m√°r l√©tezik az adatb√°zisban!")

        # üìå Ha van duplik√°lt adat, figyelmeztet√©st adunk √©s nem ment√ºnk el semmit
        if error_messages:
            for error in error_messages:
                flash(error, "warning")
            conn.close()
            return redirect(url_for("edit", id=id))

        try:
            cursor.execute("UPDATE places SET name = ?, east = ?, north = ?, address = ?, notes = ? WHERE id = ?",
                           (name, east, north, address, notes, id))
            conn.commit()
            flash("‚úÖ A hely sikeresen m√≥dos√≠tva!", "success")
        except sqlite3.IntegrityError:
            flash("‚ö†Ô∏è A m√≥dos√≠t√°s sikertelen, mert az √∫j adatok m√°r l√©teznek!", "warning")
        finally:
            conn.close()

        return redirect(url_for("index"))

    conn.close()
    return render_template("edit.html", place=place)

@app.route("/export", endpoint="export_csv")
def export_csv():
    conn = get_db_connection()
    cursor = conn.cursor()
    cursor.execute("SELECT name, east, north, address, notes FROM places")
    places = cursor.fetchall()
    conn.close()

    csv_data = "N√©v,Kelet,√âszak,C√≠m,Megjegyz√©sek\n"
    
    for place in places:
        csv_data += f"{place['name']},{place['east']},{place['north']},{place['address']},{place['notes']}\n"

    response = Response(csv_data.encode("utf-8-sig"), mimetype="text/csv")
    response.headers["Content-Disposition"] = "attachment; filename=helyek_export.csv"
    return response

print("\nüìå Regisztr√°lt Flask v√©gpontok:")
print(app.url_map)  # üìå Ki√≠rja az √∂sszes el√©rhet≈ë Flask v√©gpontot

if __name__ == "__main__":
    from waitress import serve
    import os

    port = int(os.environ.get("PORT", 5000))  # Railway √°ltal adott port
    serve(app, host="0.0.0.0", port=port)

from flask import Flask, jsonify, request
import sqlite3

app = Flask(__name__)

def get_places():
    """Lek√©rdezi az √∂sszes helyet az adatb√°zisb√≥l"""
    conn = sqlite3.connect("database.db")
    cursor = conn.cursor()
    cursor.execute("SELECT name, latitude, longitude, address FROM places")
    rows = cursor.fetchall()
    conn.close()
    
    places = []
    for row in rows:
        places.append({
            "name": row[0],
            "latitude": row[1],
            "longitude": row[2],
            "address": row[3]
        })
    
    return places

@app.route('/api/places', methods=['GET'])
def api_places():
    """API v√©gpont, ami JSON form√°tumban visszaadja a helyeket"""
    return jsonify(get_places())

if __name__ == '__main__':
    app.run(debug=True)


